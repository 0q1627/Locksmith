function Write-PlatyPSDocs {
    $ModuleName = 'Locksmith'

    # Remove the module from the current session to ensure we are working with the current source version.
    Remove-Module -Name $ModuleName -ErrorAction SilentlyContinue

    # Get the path to the module manifest.
    $ModulePath = if ($PSScriptRoot) {
        # If the $PSScriptRoot variable exists, check if you are in the build folder or the module folder.
        if ( (Split-Path -Path $PSScriptRoot -Leaf) -eq 'Build' ) {
            Split-Path -Path $PSScriptRoot -Parent
        } elseif ( (Split-Path -Path $PSScriptRoot -Leaf) -eq $ModuleName ) {
            $PSScriptRoot
        } else {
            throw 'Failed to determine module manifest path. Please ensure you are in the module or build folder.'
        }
    } else {
        # If the $PSScriptRoot variable does not exist, check if you are in the build folder or the module folder.
        if ( (Split-Path -Path $PWD.Path -Leaf) -eq 'Build' ) {
            Split-Path -Path $PWD -Parent
        } elseif ( (Split-Path -Path $pwd -Leaf) -match $ModuleName ) {
            $PWD
        } else {
            throw 'Failed to determine module manifest path. Please ensure you are in the module or build folder.'
        }
    }

    $ModuleManifestPath = Join-Path -Path $ModulePath -ChildPath "${ModuleName}.psd1"

    try {
        Import-Module ServerManager -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
        Import-Module $ModuleManifestPath
        $ModuleInfo = Test-ModuleManifest -Path $ModuleManifestPath
    } catch {
        throw "Failed to import module manifest at $ModuleManifestPath. $_"
    }

    # Module Details
    $ModuleVersion = $ModuleInfo.Version
    $ModuleDescription = $ModuleInfo.Description
    $FunctionsToExport = $ModuleInfo.FunctionsToExport

    $DocsFolder = Join-Path -Path $ModulePath -ChildPath 'Docs'
    $ModulePage = Join-Path -Path $DocsFolder -ChildPath "$($ModuleName).md"

    $markdownParams = @{
        Module         = $ModuleName
        OutputFolder   = $DocsFolder
        Force          = $true
        WithModulePage = $true
        ModulePagePath = $ModulePage
        Locale         = 'en-US'
        FwLink         = 'NA'
        HelpVersion    = $ModuleVersion
        Encoding       = [System.Text.Encoding]::UTF8
    }
    New-MarkdownHelp @markdownParams | Out-Null

    # Fix formatting in multiline examples
    Get-ChildItem -Path $DocsFolder -Recurse -File | ForEach-Object {
        $Content = Get-Content $_.FullName -Raw
        $NewContent = $Content -replace '(## EXAMPLE [^`]+?```\r\n[^`\r\n]+?\r\n)(```\r\n\r\n)([^#]+?\r\n)(\r\n)([^#]+)(#)', '$1$3$2$4$5$6'
        if ($NewContent -ne $content) {
            Set-Content -Path $_.FullName -Value $NewContent -Force
        }
    }

    # Repair markdown files generated by PlatyPS in PowerShell 7.4
    . $ModulePath\Build\MarkdownRepair.ps1
    $DocsFolder | Get-ChildItem -File | ForEach-Object {
        Repair-PlatyPSMarkdown -Path $_.FullName
    }

    # Replace each missing element we need for a proper generic module page .md file
    $ModulePageFileContent = Get-Content -Raw $ModulePage
    $ModulePageFileContent = $ModulePageFileContent -replace '{{ Fill in the Description }}', $ModuleDescription
    $ModulePageFileContent | Out-File $ModulePage -Force -Encoding:utf8

    # --- FunctionsToExport Missing Variable value --- #
    $FunctionsToExport | ForEach-Object {
        $TextToReplace = "{{ Manually Enter $($_) Description Here }}"
        $ReplacementText = (Get-Help -Detailed $_).Synopsis
        $ModulePageFileContent = $ModulePageFileContent -replace $TextToReplace, $ReplacementText
    }
    $ModulePageFileContent | Out-File $ModulePage -Force -Encoding:utf8
    # --- FunctionsToExport Missing Variable value --- #

    $MissingGUID = Select-String -Path "$DocsFolder\*.md" -Pattern '(00000000-0000-0000-0000-000000000000)'
    if ($MissingGUID.Count -gt 0) {
        Write-Host 'The documentation that got generated resulted in a generic GUID. Check the GUID entry of your module manifest.' -ForegroundColor Yellow
        throw 'Missing GUID. Please review and rebuild.'
    }

    Write-Host 'Checking for missing documentation in MD files...' -ForegroundColor Gray
    $MissingDocumentation = Select-String -Path "$DocsFolder\*.md" -Pattern '({{.*}})'
    if ($MissingDocumentation.Count -gt 0) {
        Write-Host 'The documentation that got generated resulted in missing sections which should be filled out. Please review the following sections in your comment based help, fill out missing information and rerun this build.' -ForegroundColor Yellow
        Write-Host "(Note: This can happen if the .EXTERNALHELP CBH is defined for a function before running this build.)`n" -ForegroundColor Yellow
        Write-Host "Path of files with issues: $DocsFolder\" -ForegroundColor Yellow
        $MissingDocumentation | Select-Object FileName, LineNumber, Line | Format-Table -AutoSize
        Write-Warning -Message 'Missing documentation. Please review and rebuild.'
    }

    Write-Host 'Checking for missing SYNOPSIS in MD files...' -ForegroundColor Gray
    $fSynopsisOutput = @()
    $synopsisEval = Select-String -Path "$DocsFolder\*.md" -Pattern '^## SYNOPSIS$' -Context 0, 1
    $synopsisEval | ForEach-Object {
        $chAC = $_.Context.DisplayPostContext.ToCharArray()
        if ($null -eq $chAC) {
            $fSynopsisOutput += $_.FileName
        }
    }
    if ($fSynopsisOutput) {
        Write-Host 'The following files are missing SYNOPSIS:' -ForegroundColor Yellow
        $fSynopsisOutput
        throw 'SYNOPSIS information missing. Please review.'
    }
    Write-Host 'Markdown generation complete.' -ForegroundColor Gray

    # Synopsis: Build the external xml help file from markdown help files with PlatyPS
    Write-Host 'Creating external xml help file...' -ForegroundColor Gray
    $null = New-ExternalHelp "$DocsFolder" -OutputPath "$PSScriptRoot\..\Help\en-US\" -Force -Encoding ([System.Text.Encoding]::UTF8)
    Write-Host '...External xml help file created!' -ForegroundColor Gray

} # end function Write-PlatyPSDocs

function Write-HelpOutDocs {
    $ModuleName = 'Locksmith'

    # Remove the module from the current session to ensure we are working with the current source version.
    Remove-Module -Name $ModuleName -ErrorAction SilentlyContinue

    # Get the path to the module manifest.
    $ModulePath = if ($PSScriptRoot) {
        # If the $PSScriptRoot variable exists, check if you are in the build folder or the module folder.
        if ( (Split-Path -Path $PSScriptRoot -Leaf) -eq 'Build' ) {
            Split-Path -Path $PSScriptRoot -Parent
        } elseif ( (Split-Path -Path $PSScriptRoot -Leaf) -eq $ModuleName ) {
            $PSScriptRoot
        } else {
            throw 'Failed to determine module manifest path. Please ensure you are in the module or build folder.'
        }
    } else {
        # If the $PSScriptRoot variable does not exist, check if you are in the build folder or the module folder.
        if ( (Split-Path -Path $PWD.Path -Leaf) -eq 'Build' ) {
            Split-Path -Path $PWD -Parent
        } elseif ( (Split-Path -Path $pwd -Leaf) -match $ModuleName ) {
            $PWD
        } else {
            throw 'Failed to determine module manifest path. Please ensure you are in the module or build folder.'
        }
    }

    $ModuleManifestPath = Join-Path -Path $ModulePath -ChildPath "${ModuleName}.psd1"

    try {
        Import-Module ServerManager -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
        Import-Module $ModuleManifestPath
    } catch {
        throw "Failed to import module manifest at $ModuleManifestPath. $_"
    }

    Save-MarkdownHelp -Module Locksmith -ExcludeFile @('CODE_OF_CONDUCT.md', 'CONTRIBUTING.md', 'TSS Specs.md')
    Save-MAML -Module Locksmith
}
